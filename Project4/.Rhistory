# Load the Data
WineQual <- read.csv('wineQualityWhites.csv')
library(ggplot2)
library(gridExtra)
# Load the Data
WineQual <- read.csv('wineQualityWhites.csv')
names(WineQual)
data <- read.csv('wineQualityWhites.csv')
str(data)
data <- subset(data, select = -c(X))
data <- na.omit(data)
data$quality.cat <- ordered(data$quality)
str(data$quality.cat)
data <- subset(data, select = -c(X))
data <- subset(data, select = -c('X'))
# data <- subset(data, select = -c(X))
#data <- na.omit(data)
str(data)
View(WineQual)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(ggthemes)
library(gridExtra)
# Load the Data
loanData <- read.csv('prosperLoanData.csv')
View(loanData)
loans <- subset(loanData, select = c(
Term,
LoanStatus,
BorrowerRate,
ListingCategory..numeric.,
BorrowerState,
Occupation,
EmploymentStatus,
CreditScoreRangeUpper,
OpenCreditLines,
CurrentDelinquencies,
AmountDelinquent,
DebtToIncomeRation,
StatedMonthlyIncome,
MonthlyLoanPayment
))
loans <- subset(loanData, select = c(
Term,
LoanStatus,
BorrowerRate,
ListingCategory..numeric.,
BorrowerState,
Occupation,
EmploymentStatus,
CreditScoreRangeUpper,
OpenCreditLines,
CurrentDelinquencies,
AmountDelinquent,
DebtToIncomeRatio,
StatedMonthlyIncome,
MonthlyLoanPayment
))
loans$Term <- as.factor(loans$Term)
loans <- rename(loans, c(
"ListingCategory..numeric." = "ListingCategory"))
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(memisc)
install.packages(memisc)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(stringr)
library(plyr)
loans$Term <- as.factor(loans$Term)
loans <- rename(loans, c(
"ListingCategory..numeric." = "ListingCategory"))
loans$ListingCategory <- as.factor(loans$ListingCategory)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(stringr)
library(plyr)
# Load the Data
loanData <- read.csv('prosperLoanData.csv')
loanSubset <- subset(loanData, select = c(
Term,
LoanStatus,
BorrowerRate,
ListingCategory..numeric.,
BorrowerState,
Occupation,
EmploymentStatus,
CreditScoreRangeUpper,
OpenCreditLines,
CurrentDelinquencies,
AmountDelinquent,
DebtToIncomeRatio,
StatedMonthlyIncome,
MonthlyLoanPayment
))
loans$Term <- as.factor(loans$Term)
loans <- rename(loans, c(
"ListingCategory..numeric." = "ListingCategory"))
loans$ListingCategory <- as.factor(loans$ListingCategory)
loans <- na.exclude(loanSubset)
str(loans)
